openapi: 3.0.2
servers:
  - description: project_review localhost API document
    url: 'http://localhost:8000'
  - description: project_review AWS RDS Test API document
    url: 'http://3.38.6.179/8000'
info:
  version: 1.0.0
  title: project_review-API
  description: The API for project_review
  contact:
    name: Inchan Song
    url: 'https://github.com/inchanS'
    email: song@inchan.dev
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
paths:
  /users/signup:
    post:
      tags:
        - User
      summary: 회원가입
      description: 회원가입
      produces:
        - application/json
      requestBody:
        description: 회원가입시 필요한 사용자 정보 객체
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1users~1signup/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signup/components/schemas/SignUpSuccess'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signup/components/schemas/Error'
    patch:
      tags:
        - User
      summary: 사용자 정보 수정
      description: |
        사용자 정보를 수정할 수 있는 API입니다.  
        nickname, email, password를 수정할 수 있습니다.  
        nickname, email은 중복되지 않아야 합니다.(중복시 에러 반환)  
        수정하고자 하는 정보는 body에 담아서 보내야 합니다.  
        수정하고자 하는 정보가 일부라면 해당 정보만 보내면 됩니다.
      security:
        - BearerAuth: []
      requestBody:
        description: |
          수정하고자 하는 정보를 담아서 보내야 합니다.  
          수정하고자 하는 정보가 일부라면 해당 정보만 보내면 됩니다.
        content:
          application/json:
            schema:
              type: object
              properties:
                nickname:
                  type: string
                  required: false
                  description: |
                    사용자의 닉네임입니다.  
                    중복되지 않아야 합니다.
                email:
                  type: string
                  required: false
                  description: |
                    사용자의 이메일입니다.  
                    중복되지 않아야 합니다.
                password:
                  type: string
                  required: false
                  description: |
                    사용자의 비밀번호입니다.  
                    비밀번호는 8자 이상 20자 이하로 설정해야 합니다.  
                    비밀번호는 영문이어야 하며 소문자, 대문자, 숫자, 특수문자를 모두 포함해야 합니다.  
                    비밀번호는 공백을 포함할 수 없습니다.
      responses:
        '200':
          description: |
            사용자 정보 수정에 성공했을 때 반환됩니다.  
            수정된 사용자 정보를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 성공 메시지입니다.
                    example: UPDATE_USERINFO_SUCCESS
                  result:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 사용자의 고유 id입니다.
                        example: 1
                      created_at:
                        type: string
                        description: 사용자의 생성일입니다.
                        example: 2021-08-01T00:00:00.000Z
                      updated_at:
                        type: string
                        description: 사용자의 수정일입니다.
                        example: 2021-08-01T00:00:00.000Z
                      deleted_at:
                        type: null
                        description: 사용자의 삭제일입니다.
                        example: null
                      nickname:
                        type: string
                        description: 사용자의 닉네임입니다.
                        example: testNickname
                      email:
                        type: string
                        description: 사용자의 이메일입니다.
                        example: test@test.com
        '400':
          description: |
            사용자 정보 수정에 실패했을 때 반환됩니다.  
            비밀번호를 수정하지 않으면서, 닉네임과 이메일의 수정된 내용이 기존 값과 같을 때 반환됩니다.
            에러 메시지를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 에러 메시지입니다.
                    example: NO_CHANGE
        '409':
          description: |
            사용자 정보 수정에 실패했을 때 반환됩니다.  
            닉네임 또는 이메일이 중복될 때 반환됩니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    oneOf:
                      - type: string
                        description: 닉네임 중복시 에러 메시지입니다.
                        example: (input)_IS_NICKNAME_THAT_ALREADY_EXSITS
                      - type: string
                        description: 이메일 중복시 에러 메시지입니다.
                        example: (input)_IS_EMAIL_THAT_ALREADY_EXSITS
        '500':
          description: |
            사용자 정보 수정에 실패했을 때 반환됩니다.  
            서버의 에러로 인해 수정에 실패했을 때 에러를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 에러 메시지입니다.
                    example: INTERNAL_SERVER_ERROR
    delete:
      tags:
        - User
      summary: 사용자 삭제
      description: |
        사용자를 삭제할 수 있는 API입니다.  
        사용자를 삭제하면 해당 사용자에 대한 다음 정보는 모두 삭제 처리됩니다.  
        - 사용자가 작성한 모든 게시글  
        - 사용자가 작성한 모든 댓글  
        - 사용자가 다른 게시글에 남긴 모든 공감
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 사용자 삭제에 성공했을 때 반환됩니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 성공 메시지입니다.
                    example: DELETE_USER_SUCCESS
        '404':
          description: |
            삭제하고자 하는 사용자를 찾을 수 없을 때, 에러 메시지를 반환합니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 에러 메시지입니다.
                    example: USER_IS_NOT_FOUND
        '500':
          description: |
            사용자 삭제에 실패했을 때 반환됩니다.  
            서버의 에러로 인해 삭제에 실패했을 때 에러를 반환합니다.
    components:
      schemas:
        User:
          type: object
          properties:
            nickname:
              type: string
              description: |
                사용자의 닉네임입니다.
                중복되지 않아야 합니다. (중복검사 사용 추천)
              example: 블랙팬서
            email:
              type: string
              description: |
                사용자의 이메일입니다.  
                중복되지 않아야 합니다. (중복검사 사용 추천)
              example: black@test.com
            password:
              type: string
              description: |
                사용자의 비밀번호입니다.  
                비밀번호는 **8자 이상 20자 이하**로 설정해야 합니다.  
                비밀번호는 영문이어야 하며 **소문자, 대문자, 숫자, 특수문자**를 모두 포함해야 합니다.  
                비밀번호는 공백을 포함할 수 없습니다.
              example: Abcd@1234
        SignUpSuccess:
          type: object
          properties:
            message:
              type: string
              description: 회원가입 성공 메세지
              example: SIGNUP_SUCCESS
        Error:
          type: object
          properties:
            message:
              type: string
              description: 가입 실패시 메세지
              example: (THIS_EMAIL)_IS_MAIL_THAT_ALREADY_EXSITS
  /users/signup/password:
    post:
      tags:
        - User
      summary: 사용자 비밀번호 재설정 요청(메일 보내기)
      description: |
        사용자 비밀번호 재설정 요청(메일 보내기)  
        사용자가 비밀번호를 잊어버렸을 때, 비밀번호 재설정을 위해 이메일을 보내는 API입니다.  
        이메일에는 다음과 같은 링크가 담깁니다.  
         - 비밀번호 재설정 페이지 {URL}?token={임시 토큰}  

        임시 토큰의 유효시간은 10분입니다.  
        메일은 다음과 같이 보내집니다.
        ----------------------------
        <p>안녕하세요, Review Site입니다.</p>  
          <p>비밀번호를 재설정하려면 아래 링크를 클릭해주세요.</p>  
          <p>링크는 10분 후에 만료됩니다.</p>  
          <a href="${url}">  
            <button style="
              padding: 10px 20px;
              background-color: #676FA3;
              color: #fff;
              border: none;
              border-radius: 4px;
              cursor: pointer;
            ">  
              비밀번호 재설정
            </button>  
          </a>  
          <p>만약 비밀번호 재설정을 요청하지 않으셨다면, 이 메일을 무시하시면 됩니다.</p>  
          <p>감사합니다.</p>
      produces:
        - application/json
      requestBody:
        description: 사용자 비밀번호 재설정 요청(메일 보내기)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 사용자 이메일
                  example: test@test.com
                resetPasswordUrl:
                  type: string
                  description: 비밀번호 재설정 페이지 URL
                  example: 'http://localhost:3000/resetpassword'
      responses:
        '200':
          description: 비밀번호 재설정 메일 전송 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: RESET_PASSWORD_SUCCESS_AND_SEND_MAIL
        '404':
          description: 사용자가 존재하지 않음
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: USER_IS_NOT_FOUND
        '500':
          description: Internal server error
  /users/checknickname:
    get:
      tags:
        - User
      summary: 회원가입시 닉네임 중복체크
      description: 회원가입시 닉네임 중복체크
      produces:
        - application/json
      parameters:
        - name: nickname
          in: query
          description: 중복체크할 닉네임
          required: true
          type: string
          example: 'http://localhost:8000/users/checknickname?nickname=블랙팬서'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1checknickname/components/schemas/Success'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1checknickname/components/schemas/Error'
    components:
      schemas:
        Success:
          type: object
          properties:
            message:
              type: string
              description: 닉네임 중복체크 성공 메세지
              example: AVAILABLE_NICKNAME
        Error:
          type: object
          properties:
            message:
              type: string
              description: 닉네임 중복체크 실패 메세지
              example: (THIS_EMAIL)_IS_NICKNAME_THAT_ALREADY_EXSITS
  /users/checkemail:
    get:
      tags:
        - User
      summary: 회원가입시 이메일 중복체크
      description: 회원가입시 이메일 중복체크
      produces:
        - application/json
      parameters:
        - name: email
          in: query
          description: 중복체크할 이메일
          required: true
          type: string
          example: 'http://localhost:8000/users/checkemail?email=test123'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1checkemail/components/schemas/Success'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1checkemail/components/schemas/Error'
    components:
      schemas:
        Success:
          type: object
          properties:
            message:
              type: string
              description: 이메일 중복체크 성공 메세지
              example: AVAILABLE_EMAIL
        Error:
          type: object
          properties:
            message:
              type: string
              description: 이메일 중복체크 실패 메세지
              example: (THIS_EMAIL)_IS_EMAIL_THAT_ALREADY_EXSITS
  /users/signin:
    post:
      tags:
        - User
      summary: 회원 로그인
      description: 회원 로그인 관련 API
      produces:
        - application/json
      requestBody:
        description: 회원 로그인시 필요한 사용자 정보 객체
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1users~1signin/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signin/components/schemas/Success'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1signin/components/schemas/Error'
    components:
      schemas:
        User:
          type: object
          properties:
            email:
              type: string
              description: The email of the user
              example: black@test.com
            password:
              type: string
              description: The password of the user
              example: Abcd@1234
        Success:
          type: object
          properties:
            message:
              type: string
              description: 로그인 성공 메세지
              example: SIGNIN_SUCCESS
            result:
              type: object
              description: 로그인 성공시 토큰값
              properties:
                token:
                  type: string
                  description: 토큰값
                  example: 'token: ''eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTYsImlhdCI6MTY3ODEyOTY0OX0.eyNOFEZt5xPSakzy4FyGqub9heSZA5FtOZGtWyTI4vg'''
        Error:
          type: object
          properties:
            message:
              type: string
              description: 로그인 실패시 메세지
              example: (THIS_EMAIL)_IS_NOT_FOUND
  '/users/userinfo/{userId}':
    get:
      tags:
        - User
      summary: 타겟 유저의 정보 보기
      description: |
        타겟 유저의 ID, 가입일, 닉네임, 이메일을 반환합니다.  
        path parameter로 userId를 받아서 해당 유저의 정보를 반환합니다.  
        path parameter의 userId가 없을 경우, 현재 로그인한 유저의 정보를 반환합니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: 타겟유저의 ID
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D/components/schemas/Success'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D/components/schemas/ErrorInvalidParameter'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D/components/schemas/ErrorInvalidToken'
        '500':
          description: Internal server error
    components:
      schemas:
        Success:
          type: object
          properties:
            id:
              type: integer
              description: 유저의 ID
              example: 16
            createdAt:
              type: string
              description: 유저의 가입일
              example: '2021-01-01T00:00:00.000Z'
            updated_at:
              type: string
              description: 유저의 정보 수정일
              example: '2021-01-01T00:00:00.000Z'
            deleted_at:
              type: string
              description: 유저의 탈퇴일
              example: null
            nickname:
              type: string
              description: 유저의 닉네임
              example: black
            email:
              type: string
              description: 유저의 이메일
              example: black@test.com
        ErrorInvalidToken:
          type: object
          properties:
            message:
              type: string
              description: 토큰이 유효하지 않을 때 반환되는 에러 메시지
              example: INVALID_TOKEN
        ErrorInvalidParameter:
          type: object
          properties:
            message:
              type: string
              description: path parameter가 없으면서 로그인하지 않았을 때 반환되는 에러 메시지
              example: USER_ID_IS_UNDEFINED
  '/users/userinfo/{userId}/feeds':
    get:
      tags:
        - User
      summary: 타겟 유저의 정보 보기
      description: '타겟 유저의 게시글 목록을 반환합니다.<br> path parameter로 userId를 받아서 해당 유저의 정보를 반환합니다. <br> path **parameter의 userId가 없을 경우, 현재 로그인한 유저의 정보를** 반환합니다. <br> 페이지네이션을 지원합니다.'
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: 타겟유저의 ID
          required: false
          schema:
            type: integer
        - in: query
          name: page
          description: 페이지 번호
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 페이지당 게시글 수
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1feeds/components/schemas/Success'
        '400':
          description: Invalid parameter or query
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1feeds/components/schemas/ErrorInvalidParameter'
                  - $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1feeds/components/schemas/PaginationError'
        '500':
          description: Internal server error
    components:
      schemas:
        Success:
          type: object
          properties:
            feedCntByUserId:
              type: integer
              description: 해당 유저의 총 게시글 수
              example: 10
            totalPage:
              type: integer
              description: 총 페이지 수 (limit에 따라 달라짐)
              example: 2
            feedListByUserId:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: 게시글의 ID
                    example: 1
                  categoryId:
                    type: integer
                    description: 게시글의 카테고리 ID
                    example: 1
                  category:
                    type: string
                    description: 게시글의 카테고리 이름
                    example: 의류 및 악세서리
                  userId:
                    type: integer
                    description: 게시글의 작성자 ID
                    example: 16
                  userNickname:
                    type: string
                    description: 게시글의 작성자 닉네임
                    example: black
                  title:
                    type: string
                    description: 게시글의 제목
                    example: 게시글 제목
                  content:
                    type: string
                    description: 게시글의 내용
                    example: 게시글 내용
                  imgUrl:
                    type: string
                    description: 게시글의 이미지 URL
                    example: 'http://dummyimage.com/1920x1080.png/ff4444/ffffff'
                  viewCnt:
                    type: integer
                    description: 게시글의 조회수
                    example: 1
                  commentCnt:
                    type: string
                    description: 게시글의 댓글수
                    example: 1
                  likeCnt:
                    type: string
                    description: 게시글의 좋아요수
                    example: 1
                  filesCnt:
                    type: string
                    description: 게시글의 첨부파일수
                    example: 1
                  imgCnt:
                    type: string
                    description: 게시글의 이미지수
                    example: 1
                  createdAt:
                    type: string
                    description: 게시글의 작성일
                    example: '2021-01-01 00:00:00'
                  updatedAt:
                    type: string
                    description: 게시글의 수정일
                    example: '2021-01-01 00:00:00'
                  postedAt:
                    type: string
                    description: 게시글의 게시일
                    example: '2021-01-01 00:00:00'
                  deletedAt:
                    type: string
                    description: 게시글의 삭제일
                    example: null
                  statusId:
                    type: integer
                    description: 게시글의 상태 ID
                    example: 1
        ErrorInvalidParameter:
          type: object
          properties:
            message:
              type: string
              description: path parameter가 없으면서 로그인하지 않았을 때 반환되는 에러 메시지
              example: USER_ID_IS_UNDEFINED
        PaginationError:
          type: object
          properties:
            message:
              type: string
              description: '페이지네이션 에러 메시지 (시작 인덱스가 0보다 작을 때, 또는 숫자가 아닐 때)'
              example: PAGE_START_INDEX_IS_INVALID
  '/users/userinfo/{userId}/comments':
    get:
      tags:
        - User
      summary: 타겟 유저의 정보 보기
      description: '타겟 유저의 댓글 목록을 반환합니다.<br> **토큰은 없어도 되지만, <BR> 타겟 유저와 로그인 유저간의 관련된 비공개 정보(원댓글과 비공개 대댓글과 같은 예)는 볼 수 없습니다.**  <br> 로그인 사용자(토큰이 있을 때)는 다음 사항의 정보를 볼 수 있습니다. <br> - 로그인한 사용자가 다른 사용자의 댓글 목록 열람시, 본인과 관련된 비공개 댓글은 조회 가능 <br> - 비공개 댓글의 경우 게시물 작성자는 조회 가능 <br> - 비공개 대댓글의 경우 원댓글 작성자는 조회가능(게시물 작성자는 조회불가) <br> path parameter로 userId를 받아서 해당 유저의 정보를 반환합니다. <br> **path parameter의 userId가 없을 경우, 현재 로그인한** 유저의 정보를 반환합니다. <br> 무한스크롤을 지원합니다. <br> **query parameter로 index와 limit을 받습니다.** <br> index는 추가적으로 또는 새로 불러올 첫번째 댓글의 ID를 의미합니다. <br> limit은 한 번에 불러올 댓글의 개수를 의미합니다. <br> 사용자의 댓글 정보 보기는, 삭제된 댓글도 함께 반환합니다. (하지만 내용은 삭제된 댓글임을 알리는 메시지로 대체됩니다.) <br> 이는 해당 커뮤니티에서 이루어진 사용자의 모든 댓글 활동을 나타내기 위해서입니다.'
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: 타겟유저의 ID
          required: false
          schema:
            type: integer
        - in: query
          name: index
          description: 무한스크롤에서 마지막으로 불러온 댓글의 ID
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 무한스크롤에서 한 번에 불러올 댓글의 개수
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1comments/components/schemas/Success'
        '400':
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1comments/components/schemas/ErrorInvalidParameter'
        '500':
          description: Internal server error
    components:
      schemas:
        Success:
          type: object
          properties:
            commentCntByUserId:
              type: integer
              description: 타겟 유저의 총 댓글 개수
              example: 5
            totalScrollCnt:
              type: integer
              description: '무한스크롤 시, 마지막 아이템까지 불러오기까지의 총 호출 수(총 스크롤 횟수 = 모든 페이지 수와 유사), 클라이언트에서 입력된 limit 값에 따라 달라짐'
              example: 2
            commentListByUserId:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: 댓글의 ID
                    example: 1
                  created_at:
                    type: string
                    description: 댓글의 작성일
                    example: '2021-01-02 00:00:00'
                  updated_at:
                    type: string
                    description: 댓글의 수정일
                    example: '2021-01-02 00:00:00'
                  deleted_at:
                    type: string
                    description: 댓글의 삭제일
                    example: null
                  user:
                    type: object
                    description: 댓글의 작성자 정보
                    properties:
                      id:
                        type: integer
                        description: 댓글의 작성자 ID
                        example: 1
                  feed:
                    type: object
                    description: 댓글이 작성된 게시글에 대한 정보
                    properties:
                      id:
                        type: integer
                        description: 댓글이 작성된 게시글의 ID
                        example: 1
                      user:
                        type: object
                        description: 댓글이 작성된 게시글의 작성자 정보
                        properties:
                          id:
                            type: integer
                            description: 댓글이 작성된 게시글의 작성자 ID
                            example: 1
                  comment:
                    type: string
                    description: 댓글의 내용
                    example: 댓글 내용
                  is_private:
                    type: boolean
                    description: 댓글의 비공개 여부
                    example: false
                  parent:
                    type: object
                    description: 댓글의 부모 댓글에 대한 정보
                    properties:
                      id:
                        type: integer
                        description: 댓글의 부모 댓글의 ID
                        example: 1
                      user:
                        type: object
                        description: 댓글의 부모 댓글의 작성자 정보
                        properties:
                          id:
                            type: integer
                            description: 댓글의 부모 댓글의 작성자 ID
                            example: 1
        ErrorInvalidParameter:
          type: object
          properties:
            message:
              type: string
              description: path parameter가 없으면서 로그인하지 않았을 때 반환되는 에러 메시지
              example: USER_ID_IS_UNDEFINED
  '/users/userinfo/{userId}/symbols':
    get:
      tags:
        - User
      summary: 타겟 유저의 정보 보기
      description: '타겟 유저의 좋아요 등에 대한 목록을 반환합니다.<br> **토큰은 없어도 되지만, <BR> 타겟 유저와 로그인 유저간의 관련된 비공개 정보는 볼 수 없습니다.** <br> path parameter로 userId를 받아서 해당 유저의 정보를 반환합니다. <br> path **parameter의 userId가 없을 경우, 현재 로그인한 유저의 정보를** 반환합니다. <br> 페이지네이션을 지원합니다.'
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: 타겟유저의 ID
          required: false
          schema:
            type: integer
        - in: query
          name: page
          description: 페이지 번호
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 페이지당 게시글 수
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1symbols/components/schemas/Success'
        '400':
          description: Invalid parameter
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1symbols/components/schemas/ErrorInvalidParameter'
                  - $ref: '#/paths/~1users~1userinfo~1%7BuserId%7D~1symbols/components/schemas/PaginationError'
        '500':
          description: Internal server error
    components:
      schemas:
        Success:
          type: object
          properties:
            symbolCntByUserId:
              type: integer
              description: 해당 유저의 총 공감 수
              example: 10
            totalPage:
              type: integer
              description: 총 페이지 수 (limit에 따라 달라짐)
              example: 1
            symbolListByUserId:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: 공감의 ID
                    example: 1
                  createdAt:
                    type: string
                    description: 공감의 작성일
                    example: 2021-01-01T00:00:00.000Z
                  updatedAt:
                    type: string
                    description: 공감의 수정일
                    example: 2021-01-01T00:00:00.000Z
                  feed:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 공감한 게시글의 ID
                        example: 1
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 공감한 게시글의 작성자 ID
                            example: 16
                          nickname:
                            type: string
                            description: 공감한 게시글의 작성자 닉네임
                            example: black
                      title:
                        type: string
                        description: 공감한 게시글의 제목
                        example: 게시글 제목
                  symbol:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 공감 종류의 ID
                        example: 1
                      symbol:
                        type: string
                        description: 공감 종류
                        example: LIKE
        ErrorInvalidParameter:
          type: object
          properties:
            message:
              type: string
              description: path parameter가 없으면서 로그인하지 않았을 때 반환되는 에러 메시지
              example: USER_ID_IS_UNDEFINED
        PaginationError:
          type: object
          properties:
            message:
              type: string
              description: '페이지네이션 에러 메시지 (시작 인덱스가 0보다 작을 때, 또는 숫자가 아닐 때)'
              example: PAGE_START_INDEX_IS_INVALID
  /comments:
    post:
      tags:
        - Comment
      summary: 댓글 작성
      description: |
        댓글 작성 API입니다.  
        댓글 작성시 필요한 정보를 `body`에 담아서 보내주세요.  
        댓글 작성시 `is_private`을 `true`로 설정하면 해당 댓글은 작성자만 볼 수 있습니다.   
        댓글 작성시 `parent`를 설정하면 대댓글로 작성됩니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        description: 댓글 작성시 필요한 정보
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1comments/components/schemas/CreateComment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/Success'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorInvalidToken'
        '404':
          description: Feed not found
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorFeedNotFound'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/Error'
    patch:
      tags:
        - Comment
      summary: 댓글 수정
      description: 댓글 수정 API
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        description: 댓글 수정시 필요한 정보
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1comments/components/schemas/UpdateComment'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/SuccessUpdateComment'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorInvalidTokenWithComment'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorUpdateComment'
    components:
      schemas:
        CreateComment:
          type: object
          properties:
            feed:
              type: integer
              description: 댓글을 작성할 게시글의 ID
              example: 1
            comment:
              type: string
              description: 댓글 내용
              example: 댓글 내용
            is_private:
              type: boolean
              description: 댓글 공개 여부 (미설정시 기본값 false)
              required: false
              example: true
            parent:
              type: integer
              description: 대댓글일 경우 부모 댓글의 ID (미설정시 기본값 null & 원댓글로 등록됩니다.)
              required: false
              example: 1
        Success:
          type: object
          properties:
            message:
              type: string
              description: 댓글 작성 성공시 메세지
              example: THIS_COMMENT_HAS_BEEN_SUCCESSFULLY_CREATED
        Error:
          type: object
          properties:
            message:
              type: object
              description: 댓글 작성 실패시 메세지
              properties:
                isString:
                  type: string
                  description: 댓글 내용이 문자열이 아닐 경우
                  example: comment must be a string
                isNotEmpty:
                  type: string
                  description: 댓글 내용이 비어있을 경우
                  example: comment should not be empty
        ErrorInvalidToken:
          type: object
          properties:
            message:
              type: string
              description: 유효하지 않은 토큰일 경우
              example: INVALID_TOKEN
        UpdateComment:
          type: object
          properties:
            commentId:
              type: integer
              description: 댓글의 ID
              example: 1
            comment:
              type: string
              description: 댓글 내용
              example: 댓글 내용
            is_private:
              type: boolean
              description: 댓글 공개 여부 (기본값 false)
              required: false
              example: true
        SuccessUpdateComment:
          type: object
          properties:
            message:
              type: string
              description: 댓글 수정 성공시 메세지
              example: THIS_COMMENT_HAS_BEEN_SUCCESSFULLY_UPDATED
        ErrorUpdateComment:
          type: object
          oneOf:
            - $ref: '#/paths/~1comments/components/schemas/ErrorCommentNotFound'
            - $ref: '#/paths/~1comments/components/schemas/ErrorCommentNotChanged'
        ErrorCommentNotFound:
          type: object
          properties:
            message:
              type: string
              description: 댓글이 존재하지 않을 경우
              example: ID_217_COMMENT_DOES_NOT_EXIST
        ErrorCommentNotChanged:
          type: object
          properties:
            message:
              type: string
              description: 댓글이 수정내용이 없을 경우
              example: COMMENT_IS_NOT_CHANGED
        ErrorInvalidTokenWithComment:
          type: object
          oneOf:
            - $ref: '#/paths/~1comments/components/schemas/ErrorInvalidToken'
            - $ref: '#/paths/~1comments/components/schemas/ErrorInvalidTokenAndAuth'
        ErrorInvalidTokenAndAuth:
          type: object
          properties:
            message:
              type: string
              description: 댓글 작성자가 아닐 경우
              example: ONLY_THE_AUTHOR_CAN_EDIT
        ErrorFeedNotFound:
          type: object
          properties:
            message:
              type: string
              description: 게시글이 존재하지 않을 경우
              example: COMMENT'S_FEED_VALIDATION_ERROR
  '/comments/{feedId}':
    get:
      tags:
        - Comment
      summary: 댓글 목록 조회
      description: |
        feedId에 해당하는 댓글 목록을 가져옵니다.  
        댓글의 children에는 대댓글이, 대댓글의 children에는 대댓글의 대댓글이 담겨있습니다.  
        비공개 댓글의 경우,    
        1. 해당 댓글의 작성자  
        2. 게시글의 작성자  
        의 경우에만 조회할 수 있습니다.  
          
        비공개 대댓글의 경우,  
        1. 해당 대댓글의 작성자  
        2. 원댓글의 작성자  
        의 경우에만 조회할 수 있으며, 게시글의 작성자는 조회할 수 없습니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedId
          description: 게시글의 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments~1%7BfeedId%7D/components/schemas/SuccessGetComment'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorCommentNotFound'
    components:
      schemas:
        SuccessGetComment:
          type: array
          description: 댓글 목록
          items:
            type: object
            properties:
              id:
                type: integer
                description: 댓글의 ID
                example: 1
              createdAt:
                type: string
                description: 댓글 작성 시간
                example: '2021-08-01 00:00:00'
              updatedAt:
                type: string
                description: 댓글 수정 시간
                example: '2021-08-01 00:00:00'
              deletedAt:
                oneOf:
                  - type: null
                    example: null
                  - type: string
                    description: 댓글 삭제 시간
                    example: '2021-08-02 00:00:00'
              user:
                type: object
                description: 댓글 작성자 정보
                properties:
                  id:
                    type: integer
                    description: 댓글 작성자의 ID
                    example: 1
                  nickname:
                    type: string
                    description: 댓글 작성자의 닉네임
                    example: 닉네임
                  email:
                    type: string
                    description: 댓글 작성자의 이메일
                    example: sea@heaven.com
              feed:
                type: object
                description: 댓글이 작성된 게시글 정보
                properties:
                  id:
                    type: integer
                    description: 댓글이 작성된 게시글의 ID
                    example: 1
                  title:
                    type: string
                    description: 댓글이 작성된 게시글의 제목
                    example: 게시글 제목
              comment:
                type: string
                description: 댓글 내용
                example: 댓글 내용
              is_private:
                type: boolean
                description: 댓글 공개 여부
                example: true
              children:
                type: array
                description: 대댓글 목록
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 대댓글의 ID
                      example: 1
                    createdAt:
                      type: string
                      description: 대댓글 작성 시간
                      example: '2021-08-01 00:00:00'
                    updatedAt:
                      type: string
                      description: 대댓글 수정 시간
                      example: '2021-08-01 00:00:00'
                    deletedAt:
                      oneOf:
                        - type: string
                          description: 댓글 삭제 시간
                          example: '2021-08-02 00:00:00'
                        - type: null
                          example: null
                    user:
                      type: object
                      description: 대댓글 작성자 정보
                      properties:
                        id:
                          type: integer
                          description: 대댓글 작성자의 ID
                          example: 1
                        nickname:
                          type: string
                          description: 대댓글 작성자의 닉네임
                          example: 닉네임
                        email:
                          type: string
                          description: 대댓글 작성자의 이메일
                          example: email@email.com
                    comment:
                      type: string
                      description: 대댓글 내용
                      example: 대댓글 내용
                    is_private:
                      type: boolean
                      description: 대댓글 공개 여부
                      example: true
                    children:
                      type: array
                      description: 대댓글의 대댓글 목록
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: 대댓글의 대댓글의 ID
                            example: 1
                          createdAt:
                            type: string
                            description: 대댓글의 대댓글 작성 시간
                            example: '2021-08-01 00:00:00'
                          updatedAt:
                            type: string
                            description: 대댓글의 대댓글 수정 시간
                            example: '2021-08-01 00:00:00'
                          deletedAt:
                            oneOf:
                              - type: string
                                description: 댓글 삭제 시간
                                example: '2021-08-02 00:00:00'
                              - type: null
                                example: null
                          user:
                            type: object
                            description: 대댓글의 대댓글 작성자 정보
                            properties:
                              id:
                                type: integer
                                description: 대댓글의 대댓글 작성자의 ID
                                example: 1
                              nickname:
                                type: string
                                description: 대댓글의 대댓글 작성자의 닉네임
                                example: 닉네임
                              email:
                                type: string
                                description: 대댓글의 대댓글 작성자의 이메일
                                example: testemail@email.co.kr
  '/comments/{commentId}':
    delete:
      tags:
        - Comment
      summary: 댓글 삭제
      description: 댓글 삭제 API
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: commentId
          description: 댓글의 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments~1%7BcommentId%7D/components/schemas/SuccessDeleteComment'
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorInvalidTokenWithComment'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1comments/components/schemas/ErrorCommentNotFound'
    components:
      schemas:
        SuccessDeleteComment:
          type: object
          properties:
            message:
              type: string
              description: 댓글 삭제 성공시 메세지
              example: THIS_COMMENT_HAS_BEEN_SUCCESSFULLY_DELETED
  /categories:
    get:
      tags:
        - category
      summary: 카테고리 확인
      description: 현재 존재하는 카테고리 확인 API
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1categories/components/schemas/SuccessGetCategory'
    components:
      schemas:
        SuccessGetCategory:
          type: array
          description: 카테고리 목록
          items:
            type: object
            properties:
              id:
                type: integer
                description: 카테고리의 ID
              category:
                type: string
                description: 카테고리의 이름
              description:
                type: string
                description: 카테고리의 설명
          example:
            - id: 1
              category: 음식
              description: '식당, 카페, 디저트 등'
            - id: 2
              category: 전자제품
              description: '스마트폰, 컴퓨터, 가전제품 등'
            - id: 3
              category: 의류 및 악세서리
              description: '패션, 의류, 신발, 가방, 액세서리 등'
            - id: 4
              category: 생활용품
              description: '가구, 주방용품, 화장품, 잡화 등'
            - id: 5
              category: 화장품
              description: '화장품, 향수, 뷰티 등'
            - id: 6
              category: 컨텐츠
              description: '영화, 드라마, 음악, 책, 만화, 이벤트 등'
            - id: 7
              category: 여행
              description: '여행, 관광지, 호텔, 숙박시설 등'
            - id: 8
              category: 기타
              description: 기타
  /symbols:
    get:
      tags:
        - Symbol
      summary: 심볼 조회
      description: 심볼 조회 API
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols/components/schemas/SuccessGetSymbol'
    components:
      schemas:
        SuccessGetSymbol:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: 심볼 ID
              symbol:
                type: string
                description: 심볼 종류
          example:
            - id: 1
              symbol: like
            - id: 2
              symbol: I have this too
  '/symbols/{feedId}':
    post:
      tags:
        - Symbol
      summary: 심볼 추가 및 수정
      description: 리뷰를 보는 사용자가 각 게시글에 대하야 좋아요 등의 심볼을 추가 및 수정하는 API
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedId
          description: 피드 ID
          required: true
          schema:
            type: integer
      requestBody:
        description: 심볼 추가 및 수정
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/RequestAddAndUpdateSymbol'
      responses:
        '200':
          description: 심볼 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/RequestUpdateSymbol'
        '201':
          description: 심볼 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/RequestAddSymbol'
        '400':
          description: Bad Request (변경사항이 없을 때)
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorNotChanged'
        '403':
          description: 본인의 게시글에 공감을 추가할 때 (사용자의 게시글에는 공감을 추가할 수 없습니다.)
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateAuthor'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateFeed'
                  - $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateSymbol'
                  - $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorDuplicateSymbol'
    get:
      tags:
        - Symbol
      summary: 게시글별 심볼 총 개수 조회
      description: 게시글별 심볼 총 개수 조회 API
      produces:
        - application/json
      parameters:
        - in: path
          name: feedId
          description: 피드 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 게시글별 심볼 총 개수 조회 성공
          content:
            application/json:
              schema:
                type: array
                description: 게시글의 심볼 목록별 총 개수
                items:
                  type: object
                  properties:
                    feedId:
                      type: integer
                      description: 피드 ID
                    symbolId:
                      type: integer
                      description: 심볼 ID
                    symbol:
                      type: string
                      description: 심볼 종류
                    count:
                      type: integer
                      description: 심볼 개수
                example:
                  - feedId: 4
                    symbolId: 2
                    symbol: I have this too
                    count: 2
                  - feedId: 4
                    symbolId: 1
                    symbol: like
                    count: 2
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateFeed'
    delete:
      tags:
        - Symbol
      summary: 심볼 삭제
      description: 심볼 삭제 API
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedId
          description: 피드 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 심볼 삭제 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/SuccessDeleteSymbol'
        '401':
          description: 유효하지 않은 토큰
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateToken'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1%7BfeedId%7D/components/schemas/ErrorValidateFeedSymbol'
    components:
      schemas:
        RequestAddAndUpdateSymbol:
          type: object
          properties:
            symbolId:
              type: integer
              description: 심볼 ID
          example:
            symbolId: 1
        RequestAddSymbol:
          type: object
          description: 심볼 추가 성공
          properties:
            message:
              type: string
              description: 심볼 추가 성공 메시지
              example: SYMBOL_ID_2_HAS_BEEN_ADDED_TO_THE_FEED_ID_4
            result:
              type: array
              description: 게시글의 심볼 목록별 총 개수
              items:
                type: object
                properties:
                  feedId:
                    type: integer
                    description: 피드 ID
                  symbolId:
                    type: integer
                    description: 심볼 ID
                  symbol:
                    type: string
                    description: 심볼 종류
                  count:
                    type: integer
                    description: 심볼 개수
              example:
                - feedId: 4
                  symbolId: 2
                  symbol: I have this too
                  count: 1
                - feedId: 4
                  symbolId: 1
                  symbol: like
                  count: 3
        RequestUpdateSymbol:
          type: object
          description: 심볼 수정 성공
          properties:
            message:
              type: string
              description: 심볼 변경 성공 메시지
              example: SYMBOL_ID_2_HAS_BEEN_UPDATED_TO_THE_FEED_ID_4
            result:
              type: array
              description: 게시글의 심볼 목록별 총 개수
              items:
                type: object
                properties:
                  feedId:
                    type: integer
                    description: 피드 ID
                  symbolId:
                    type: integer
                    description: 심볼 ID
                  symbol:
                    type: string
                    description: 심볼 종류
                  count:
                    type: integer
                    description: 심볼 개수
              example:
                - feedId: 4
                  symbolId: 2
                  symbol: I have this too
                  count: 2
                - feedId: 4
                  symbolId: 1
                  symbol: like
                  count: 2
        ErrorValidateFeed:
          type: object
          properties:
            message:
              type: string
              description: '게시물이 존재하지 않거나 삭제되었거나, 유효하지 않을 경우'
              example: INVALID_FEED
        ErrorValidateAuthor:
          type: object
          properties:
            message:
              type: string
              description: '공감 수정시, 원 공감 작성자가 아닐 경우'
              example: THE_AUTHOR_OF_THE_POST_CANNOT_EMPATHIZE
        ErrorValidateSymbol:
          type: object
          properties:
            message:
              type: string
              description: 심볼이 존재하지 않을 경우
              example: INVALID_SYMBOL
        ErrorNotChanged:
          type: object
          properties:
            message:
              type: string
              description: 심볼이 변경되지 않았을 경우
              example: NOT_CHANGED_FEED_SYMBOL
        ErrorDuplicateSymbol:
          type: object
          properties:
            message:
              type: string
              description: NOT_CHANGED 에러와 별개로 공감이 DB에 중복 추가되었을 경우
              example: DUPLICATE_FEED_SYMBOL
        SuccessDeleteSymbol:
          type: object
          properties:
            message:
              type: string
              description: 심볼 삭제 성공 메시지
              example: SYMBOL_REMOVED_FROM_4_FEED
            result:
              type: array
              description: '심볼 삭제 후, 현재 게시글의 심볼 목록별 총 개수'
              items:
                type: object
                properties:
                  feedId:
                    type: integer
                    description: 피드 ID
                  symbolId:
                    type: integer
                    description: 심볼 ID
                  symbol:
                    type: string
                    description: 심볼 종류
                  count:
                    type: integer
                    description: 심볼 개수
              example:
                - feedId: 4
                  symbolId: 2
                  symbol: I have this too
                  count: 1
                - feedId: 4
                  symbolId: 1
                  symbol: like
                  count: 3
        ErrorValidateFeedSymbol:
          type: object
          properties:
            message:
              type: string
              description: '삭제하려는 게시글별 공감이 존재하지 않거나, 유효하지 않을 경우'
              example: FEED_SYMBOL_NOT_FOUND
        ErrorValidateToken:
          type: object
          properties:
            message:
              type: string
              description: 토큰이 유효하지 않을 때 반환되는 에러 메시지
              example: INVALID_TOKEN
  '/symbols/check/{feedId}':
    get:
      tags:
        - Symbol
      summary: 심볼 여부 조회
      description: 게시글에 대한 현재 로그인 사용자의 심볼 여부를 조회하는 API
      produces:
        - application/json
      parameters:
        - in: path
          name: feedId
          description: 피드 ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 심볼 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1check~1%7BfeedId%7D/components/schemas/ResponseCheckSymbol'
        '401':
          description: 유효하지 않은 토큰
          content:
            application/json:
              schema:
                $ref: '#/paths/~1symbols~1check~1%7BfeedId%7D/components/schemas/ErrorValidateToken'
    components:
      schemas:
        ResponseCheckSymbol:
          type: object
          properties:
            checkValue:
              type: string
              description: 심볼 체크 여부 (true or false)
              example: true
            result:
              type: object
              description: 사용자의 게시글에 대한 심볼 정보
              properties:
                symbolId:
                  type: integer
                  description: 심볼 ID
                  example: 1
                created_at:
                  type: string
                  description: 심볼 생성 시간
                  example: '2023-03-14 02:19:55.969026'
                updated_at:
                  type: string
                  description: 심볼 수정 시간
                  example: '2023-03-14 02:19:55.969026'
                deleted_at:
                  type: string
                  description: 심볼 삭제 시간 (삭제되지 않은 경우 null)
                  example: null
                user:
                  type: number
                  description: 심볼을 추가한 사용자 ID
                  example: 1
                feed:
                  type: number
                  description: 심볼을 추가한 피드 ID
                  example: 1
                symbol:
                  type: number
                  description: 심볼 ID
                  example: 1
        ErrorValidateToken:
          type: object
          properties:
            message:
              type: string
              description: 토큰이 유효하지 않을 때 반환되는 에러 메시지
              example: INVALID_TOKEN
  /feeds/temp:
    get:
      tags:
        - TempFeed
      summary: 임시저장 목록 조회
      description: |
        사용자의 임시저장 목록을 모두 가져옵니다.  
        Authorization 헤더에 **Bearer 토큰**을 넣어주세요.  
        토큰의 사용자를 기준으로 임시저장 목록을 가져옵니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1temp/components/schemas/SuccessGetTempFeed'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1temp/components/schemas/Error'
    post:
      tags:
        - TempFeed
      summary: 게시글 임시저장
      description: |
        게시글을 임시저장합니다.  
        Authorization 헤더에 **Bearer 토큰**을 넣어주세요.  
        토큰의 사용자를 작성자로 하여 게시글을 임시저장합니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        description: |
          게시글 임시저장시, 필요한 body 정보  
          모든 항목은 **required: false** 입니다.  
          하지만 **항목 중 하나 이상의 값을 반드시 입력**해야 합니다.  

          임시저장 게시글의 제목을 입력하지 않으면 getTempFeed API에서는 최종 자동저장 시간으로 대체됩니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 게시글 제목
                  required: false
                content:
                  type: string | null
                  description: 게시글 내용
                  required: false
                fileLinks:
                  type: array | null
                  description: 게시글에 첨부할 이미지 또는 파일의 URL
                  required: false
                estimation:
                  type: integer | null
                  description: '리뷰 상품 또는 서비스에 대한 평점 ID (1-double like, 2-like, 3-dislike)'
                  required: false
                category:
                  type: number | null
                  description: 카테고리 ID
                  required: false
              example:
                title: 게시글 제목
                content: 게시글 내용
                fileLinks:
                  - 'https://image.com/image.jpeg'
                  - 'https://image2.com/docu.pdf'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 게시글 임시저장 성공 메시지
                    example: create temporary feed success
                  result:
                    $ref: '#/paths/~1feeds~1temp/components/schemas/SuccessPostTempFeed'
    patch:
      tags:
        - TempFeed
      summary: 임시저장 게시글 수정
      description: |
        임시저장 게시글을 수정하는 API입니다.  
        **자동저장**시 사용됩니다.  
        임시저장 게시글의 제목을 입력하지 않으면 getTempFeed API에서는 최종 자동저장 시간으로 대체됩니다.  
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        description: |
          임시저장된 게시글의 수정시, 필요한 body 정보  
          **feedId**는 **required: true** 입니다.  
          그 외 나머지 모든 항목은 **required: false** 입니다.  
          하지만 **feedId를 제외한 나머지 항목 중 하나 이상의 값을 반드시 입력**해야 합니다.  

          임시저장 게시글의 제목을 입력하지 않으면 getTempFeed API에서는 최종 자동저장 시간으로 대체됩니다.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                feedId:
                  type: integer
                  description: 수정할 임시저장 게시글의 ID
                  required: true
                title:
                  type: string
                  description: 게시글 제목
                  required: false
                content:
                  type: string | null
                  description: 게시글 내용
                  required: false
                fileLinks:
                  type: array | null
                  description: 게시글에 첨부할 이미지 또는 파일의 URL
                  required: false
                estimation:
                  type: integer | null
                  description: '리뷰 상품 또는 서비스에 대한 평점 ID (1-double like, 2-like, 3-dislike)'
                  required: false
                category:
                  type: number | null
                  description: 카테고리 ID
                  required: false
              example:
                feedId: 1
                title: 게시글 제목
                content: 게시글 내용
                fileLinks:
                  - 'https://image.com/image.jpeg'
                  - 'https://image2.com/docu.pdf'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 임시저장 게시글 수정 성공 메시지
                    example: update temporary feed success
                  result:
                    $ref: '#/paths/~1feeds~1temp/components/schemas/SuccessPostTempFeed'
    components:
      schemas:
        SuccessGetTempFeed:
          type: array
          description: 임시저장 목록
          items:
            type: object
            properties:
              id:
                type: integer
                description: 임시저장 게시글의 ID
              categoryId:
                type: integer | null
                description: 카테고리 ID
              category:
                type: string | null
                description: 카테고리 이름
              userId:
                type: integer
                description: 사용자 ID
              userNickname:
                type: string
                description: 사용자 닉네임
              title:
                type: string
                description: 게시글 제목 (임시저장시 제목을 입력하지 않으면 최종 임시저장 datetime으로 대체)
              content:
                type: string | null
                description: 게시글 내용
              imgUrl:
                type: string | null
                description: 게시글 이미지 URL
              viewCnt:
                type: integer
                description: 조회 수 (임시저장글의 경우 조회수는 모두 0입니다.)
              commentCnt:
                type: integer
                description: 댓글 수
              likeCnt:
                type: integer
                description: 좋아요 수
              createdAt:
                type: string
                description: 게시글 작성 시간
              updatedAt:
                type: string
                description: 게시글 수정 시간
              postedAt:
                type: string | null
                description: 게시글 게시 시간
              statusId:
                type: integer
                description: '게시글 상태 ID  - 1: 게시, 2: 임시저장'
            example:
              - id: 1
                categoryId: null
                category: null
                userId: 1
                userNickname: 닉네임1
                title: 게시글 제목
                content: null
                imgUrl: 'https://image.com'
                viewCnt: 0
                commentCnt: 0
                likeCnt: 0
                createdAt: '2021-07-01 00:00:00'
                updatedAt: '2021-07-01 00:00:00'
                postedAt: null
                statusId: 2
              - id: 2
                categoryId: 2
                category: 카테고리2
                userId: 1
                userNickname: 닉네임1
                title: null
                content: 게시글 내용
                imgUrl: null
                viewCnt: 0
                commentCnt: 0
                likeCnt: 0
                createdAt: '2021-07-01 00:00:00'
                updatedAt: '2021-07-01 00:00:00'
                postedAt: null
                statusId: 2
        SuccessPostTempFeed:
          type: object
          properties:
            id:
              type: integer
              description: 임시저장 게시글의 ID
              example: 1
            created_at:
              type: string
              description: 임시저장 게시글 생성 시간
              example: 2023-03-20T21:13:06.972Z
            updated_at:
              type: string
              description: 임시저장 게시글 수정 시간
              example: 2023-03-20T21:13:06.972Z
            user:
              type: object
              description: 임시저장 게시글 작성자의 정보
              properties:
                id:
                  type: integer
                  description: 사용자 ID
                  example: 1
                nickname:
                  type: string
                  description: 사용자 닉네임
                  example: nickname
            title:
              type: string | null
              description: 임시저장 게시글 제목
              example: null
            content:
              type: string | null
              description: 임시저장 게시글 내용
              example: 이 상품은 정말 좋아요! 추천합니다. 그ㄹ던데
            viewCnt:
              type: number
              description: 게시글 조회수
              example: 0
            category:
              type: object | null
              description: 임시저장 게시글 카테고리 ID
              properties:
                id:
                  type: number
                  description: category ID
                  example: 1
                category:
                  type: string
                  description: category 종류
                  example: 전자기기
            posted_at:
              type: string | null
              description: 임시저장 게시글 게시 시간
              example: null
            status:
              type: object
              description: 게시글의 상태 정보 (임시저장 게시글 또는 정식 게시글)
              properties:
                id:
                  type: number
                  description: 게시글 상태 ID
                  example: 2
                is_status:
                  type: string
                  description: 게시글 상태
                  example: temporary
            uploadFiles:
              type: array
              description: 임시저장 게시글에 첨부된 이미지 또는 파일의 URL
              items:
                type: object
                description: 임시저장 게시글에 첨부된 이미지 또는 파일에 대한 개별 정보
                properties:
                  id:
                    type: integer
                    description: 첨부파일 ID
                  is_img:
                    type: boolean
                    description: '첨부파일의 형식이 ''이미지''인지에 대한 여부 (true: 이미지, false: 파일)'
                  file_link:
                    type: string
                    description: 첨부파일 URL
                  file_name:
                    type: string
                    description: 첨부파일 이름
                  file_size:
                    type: string
                    description: '첨부파일 크기 (1MB 이하는 KB 단위로 표시, 1MB 이상은 MB 단위로 표시)'
                example:
                  - id: 1
                    is_img: true
                    file_link: 'https://image.com/image.jpeg'
                    file_name: image.jpeg
                    file_size: 1.22KB
                  - id: 2
                    is_img: false
                    file_link: 'https://image2.com/docu.pdf'
                    file_name: docu.pdf
                    file_size: 2.22MB
        Error:
          type: object
          description: 에러 응답
          properties:
            message:
              type: string
              description: 에러 메시지
              example: Internal Server Error
  /feeds/post/:
    get:
      tags:
        - Feed
      summary: 게시글 목록 가져오기
      description: |
        게시글 목록을 가져옵니다.
      produces:
        - application/json
      parameters:
        - in: query
          name: categoryId
          description: 카테고리 (query가 없으면 전체 카테고리가 반환됩니다.)
          required: false
          schema:
            type: string
        - in: query
          name: index
          description: '한번에 보내주는 게시글의 첫 index 번호 (query가 없으면 **0(첫 게시물의 index)이 기본**으로 반환됩니다.), 무한스크롤에서 마지막 호출 및 관찰된 아이템의 다음 index가 됩니다.'
          required: false
          schema:
            type: integer
        - in: query
          name: limit
          description: 한번에 보내주는 게시글 수 (query가 없거나 0으로 전달되면 **default 값 10**으로 처리되어 반환됩니다.)
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1post~1/components/schemas/SuccessGetFeedList'
        '500':
          description: Internal Server Error
    post:
      tags:
        - Feed
      summary: 게시글 작성
      description: |
        게시글 작성 API입니다. 
        작성한 게시글을 등록합니다.  
        등록한 게시글은 postedAt에 등록일이 저장되며, statusId 값으로 1이 저장됩니다.  
        게시글 작성 시, 이미지 파일 및 일반 문서 파일을 첨부할 수 있습니다.
        **토큰을 반드시 필요로 합니다.**

        **임시저장된 글을 정식 게시글로 등록할 경우**,  
        임시저장 게시글의 **feedId**가 필요합니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/paths/~1feeds~1post~1/components/schemas/RequestPostFeed'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1post~1/components/schemas/SuccessPostFeed'
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Feed
      summary: 게시글 수정
      description: |
        게시글 수정 API입니다. 
        작성한 게시글을 수정합니다.  
        수정한 게시글은 updatedAt에 수정일이 저장됩니다.  
        게시글 수정 시, 첨부된 파일을 교체할 수 있습니다.
        파일을 수정할 경우, 이전의 업로드된 파일은 AWS S3에서 삭제되며 따라서 이전 파일들의 url 역시 더 이상 유효하지 않습니다.  
        **토큰을 반드시 필요로 합니다.**
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/paths/~1feeds~1post~1/components/schemas/RequestUpdatePostFeed'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1post~1/components/schemas/SuccessPostFeed'
        '500':
          description: Internal Server Error
    components:
      schemas:
        SuccessGetFeedList:
          type: object
          properties:
            id:
              type: integer
              description: 게시글 id
            categoryId:
              type: string
              description: 카테고리 id
            category:
              type: string
              description: 카테고리 이름
            userId:
              type: integer
              description: 유저 id
            userNickname:
              type: string
              description: 유저 닉네임
            title:
              type: string
              description: 게시글 제목
            content:
              type: string
              description: 게시글 내용
            imgUrl:
              type: string
              description: 게시글 대표 이미지의 url
            viewCnt:
              type: integer
              description: 조회수
            commentCnt:
              type: integer
              description: 댓글수
            likeCnt:
              type: integer
              description: 좋아요수
            filesCnt:
              type: integer
              description: 첨부파일수 (이미지 파일은 제외됩니다.)
            imgCnt:
              type: integer
              description: 이미지 파일수
            createdAt:
              type: string
              description: 게시글 생성일
            updatedAt:
              type: string
              description: 게시글 수정일
            postedAt:
              type: string
              description: 게시글 게시일
            deletedAt:
              type: string
              description: 게시글 삭제일
            statusId:
              type: integer
              description: 게시글 상태 id
          example:
            - id: 1
              categoryId: 1
              category: 자유
              userId: 1
              userNickname: inchan
              title: 첫번째 게시글
              content: 첫번째 게시글 내용
              imgUrl: 'https://i.imgur.com/1j2j3j4.jpg'
              viewCnt: 0
              commentCnt: 0
              likeCnt: 0
              filesCnt: 0
              imgCnt: 1
              createdAt: '2021-07-01 00:00:00'
              updatedAt: '2021-07-01 00:00:00'
              postedAt: '2021-07-01 00:00:00'
              deletedAt: null
              statusId: 1
            - id: 2
              categoryId: 2
              category: 질문
              userId: 1
              userNickname: inchan
              title: 두번째 게시글
              content: 두번째 게시글 내용
              imgUrl: 'https://i.imgur.com/1j2j3j4.jpg'
              viewCnt: 200
              commentCnt: 0
              likeCnt: 3
              filesCnt: 1
              imgCnt: 2
              createdAt: '2021-07-01 00:00:00'
              updatedAt: '2021-07-01 00:00:00'
              postedAt: '2021-07-01 00:00:00'
              deletedAt: null
              statusId: 1
        RequestPostFeed:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedId:
                    type: integer
                    description: 임시저장된 게시글의 id
                    required: false
                  title:
                    type: string
                    description: 게시글 제목
                    required: true
                  content:
                    type: string
                    description: 게시글 내용
                    required: true
                  estimation:
                    type: integer
                    description: 게시글 주제에 대한 작성자의 평가 아이콘 ID
                    required: true
                  category:
                    type: integer
                    description: 게시글 카테고리 ID
                    required: true
                  fileLinks:
                    type: array
                    description: 게시글에 첨부할 파일의 url
                    required: false
                    items:
                      type: string
                example:
                  title: 게시글 제목
                  content: 게시글 내용
                  estimation: 1
                  category: 1
                  fileLinks:
                    - 'https://s3.ap-northeast-2.amazonaws.com/woowahan-crews/1616580000000_1.png'
                    - 'https://s3.ap-northeast-2.amazonaws.com/woowahan-crews/1616580000000_2.png'
        RequestUpdatePostFeed:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedId:
                    type: integer
                    description: 수정할 게시글의 ID
                    required: true
                  title:
                    type: string
                    description: 게시글 제목
                    required: true
                  content:
                    type: string
                    description: 게시글 내용
                    required: true
                  estimation:
                    type: integer
                    description: 게시글 주제에 대한 작성자의 평가 아이콘 ID
                    required: true
                  category:
                    type: integer
                    description: 게시글 카테고리 ID
                    required: true
                  fileLinks:
                    type: array
                    description: 게시글에 첨부할 파일의 url
                    required: false
                    items:
                      type: string
                example:
                  feedId: 1
                  title: 게시글 제목
                  content: 게시글 내용
                  estimation: 1
                  category: 1
                  fileLinks:
                    - 'https://s3.ap-northeast-2.amazonaws.com/woowahan-crews/1616580000000_1.png'
                    - 'https://s3.ap-northeast-2.amazonaws.com/woowahan-crews/1616580000000_2.png'
        SuccessPostFeed:
          type: object
          properties:
            message:
              type: string
              description: 성공 메시지
              example: create feed success
            result:
              type: object
              properties:
                id:
                  type: integer
                  description: 게시글 id
                created_at:
                  type: string
                  description: 게시글 생성일
                updated_at:
                  type: string
                  description: 게시글 수정일
                user:
                  type: object
                  description: 게시글 작성자 정보
                  properties:
                    id:
                      type: integer
                      description: 유저 id
                    nickname:
                      type: string
                      description: 유저 닉네임
                title:
                  type: string
                  description: 게시글 제목
                content:
                  type: string
                  description: 게시글 내용
                viewCnt:
                  type: integer
                  description: 조회수
                estimation:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 게시글 주제에 대한 작성자의 평가 아이콘 ID
                    estimation:
                      type: integer
                      description: 게시글 주제에 대한 작성자의 평가 아이콘 ID
                category:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 게시글 카테고리 ID
                    category:
                      type: string
                      description: 게시글 카테고리 이름
                status:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 게시글 상태 id
                    status:
                      type: string
                      description: 게시글 상태
                posted_at:
                  type: string
                  description: 게시글 게시일
                uploadFiles:
                  type: object
                  description: 게시글에 첨부한 파일의 url
                  properties:
                    id:
                      type: integer
                      description: 첨부파일 id
                    is_img:
                      type: boolean
                      description: 첨부파일의 종류가 이미지인지에 대한 여부
                    file_link:
                      type: string
                      description: 파일의 url
                    file_name:
                      type: string
                      description: 파일의 이름
                    file_size:
                      type: integer
                      description: '파일 크기(1MB 이하는 KB 단위로 표시, 1MB 이상은 MB 단위로 표시)'
              example:
                id: 1
                created_at: '2021-07-01 00:00:00'
                updated_at: '2021-07-01 00:00:00'
                user:
                  id: 1
                  nickname: inchan
                title: 첫번째 게시글
                content: 첫번째 게시글 내용
                viewCnt: 0
                estimation:
                  id: 1
                  estimation: 1
                category:
                  id: 1
                  category: 자유
                status:
                  id: 1
                  status: 게시
                posted_at: '2021-07-01 00:00:00'
                uploadFiles:
                  - id: 1
                    is_img: true
                    file_link: 'https://i.imgur.com/1j2j3j4.jpg'
                    file_name: 1j2j3j4.jpg
                    file_size: 39.02KB
                  - id: 2
                    is_img: false
                    file_link: 'https://i.imgur.com/1j2j3j4.pdf'
                    file_name: 1j2j3j4.pdf
                    file_size: 1.20MB
  '/feeds/{feedId}':
    get:
      tags:
        - Feed
      summary: 게시글 및 임시저장글 가져오기 (피드 상세보기)
      description: |
        feedId값의 게시글을 가져옵니다.  
        토큰은 필수가 아닙니다.  

        임시저장 게시글의 경우,  
        Authorization 헤더에 **Bearer 토큰**을 넣어주세요.    
        임시저장 게시글은 기본적으로 게시되지 않은 비공개글이기에 토큰 사용자와 게시글 작성자가 일치해야 합니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedId
          description: 게시글 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1%7BfeedId%7D/components/schemas/SuccessGetFeed'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Feed
      summary: 게시글 및 임시게시글 삭제
      description: |
        feedId값의 게시글을 삭제합니다.  
        토큰은 필수입니다.  
        토큰 사용자와 게시글 작성자가 일치해야 합니다.

        - 해당 게시글의 모든 uploadFile이 삭제되며 링크 또한 무효화 됩니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: feedId
          description: 게시글 ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: success message
                    example: delete feed success
        '403':
          description: 게시물 작성자와 토큰 사용자가 일치하지 않을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: error message
                    example: ONLY_THE_AUTHOR_CAN_DELETE
        '404':
          description: 삭제하고자 하는 게시물이 없을 때
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: error message
                    example: NOT_FOUND_FEED
        '500':
          description: Internal Server Error
    components:
      schemas:
        SuccessGetFeed:
          type: object
          properties:
            message:
              type: string
              description: success message
              example: check feed success
            result:
              type: object
              properties:
                feedId:
                  type: integer
                  description: 게시글 ID
                  example: 1
                created_at:
                  type: string
                  description: 게시글 생성 시간
                  example: 2021-05-01T00:00:00.000Z
                updated_at:
                  type: string
                  description: 게시글 수정 시간
                  example: 2021-05-01T00:00:00.000Z
                user:
                  type: object
                  properties:
                    userId:
                      type: integer
                      description: 유저 ID
                      example: 1
                    nickname:
                      type: string
                      description: 유저 닉네임
                      example: inchan
                title:
                  type: string
                  description: 게시글 제목
                  example: 게시글 제목입니다.
                content:
                  type: string
                  description: 게시글 내용
                  example: 게시글 내용입니다.
                viewCnt:
                  type: integer
                  description: 게시글 조회수
                  example: 1
                estimation:
                  type: object
                  desctiption: 작성자가 리뷰를 하며 평가한 정보
                  properties:
                    id:
                      type: integer
                      description: 평가 ID
                      example: 1
                    estimation:
                      type: string
                      description: 평가 종류
                      example: like
                category:
                  type: object
                  description: 게시글 카테고리
                  properties:
                    id:
                      type: integer
                      description: 카테고리 ID
                      example: 1
                    category:
                      type: string
                      description: 카테고리 이름
                      example: 카테고리 이름
                status:
                  type: object
                  description: 게시글 상태
                  properties:
                    id:
                      type: integer
                      description: 상태 ID
                      example: 1
                    is_status:
                      type: string
                      description: '상태 이름 (published, temporary, deleted)'
                      example: published
                posted_at:
                  type: string
                  description: 게시글 게시 시간
                  example: 2021-05-01T00:00:00.000Z
                uploadFiles:
                  type: object
                  description: 게시글에 업로드된 파일
                  properties:
                    id:
                      type: integer
                      description: 파일 ID
                      example: 1
                    is_img:
                      type: boolean
                      description: 이미지 여부
                      example: true
                    file_link:
                      type: string
                      description: 파일 URL
                      example: 'https://s3.ap-northeast-2.amazonaws.com/project-review-bucket/1620000000000.png'
                    file_name:
                      type: string
                      description: 파일 이름
                      example: 1620000000000.png
                    file_size:
                      type: integer
                      description: '파일 크기 (1MB 이하는 KB 단위로 표시, 1MB 이상은 MB 단위로 표시)'
                      example: 1.02MB
  /feeds/estimations:
    get:
      tags:
        - Feed
      summary: 리뷰 평가 아이콘 ID 조회
      description: 리뷰 평가 아이콘 ID 조회
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/paths/~1feeds~1estimations/components/schemas/SuccessGetEstimations'
        '500':
          description: Internal Server Error
    components:
      schemas:
        SuccessGetEstimations:
          type: object
          properties:
            id:
              type: integer
              description: 평가 아이콘 ID
            estimation:
              type: string
              description: 평가 아이콘
          example:
            - id: 1
              estimation: double like
            - id: 2
              estimation: like
            - id: 3
              estimation: dislike
  /upload:
    post:
      tags:
        - upload
      summary: file upload (multiple)
      description: |
        게시글 작성에 앞서 이미지 및 문서 파일을 업로드할 때 사용할 수 있습니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: |
          파일 업로드 저장시, 필요한 body 정보입니다.    
          한번에 하나 또는 여러 개의 파일을 업로드 할 수 있습니다.  

          파일은 **한번의 API 요청으로 5개까지** 업로드할 수 있습니다.  
          파일의 크기는 개당 **5MB**까지 업로드할 수 있습니다.    

          이미지의 경우 업로드시,  
          width가 1920px 이상일 경우, 1920px로 비율 리사이징하여 업로드합니다.
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Files uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  file_links:
                    type: array
                    items:
                      type: string
                      example:
                        - 'https://s3.ap-northeast-2.amazonaws.com/project-review-bucket/1620000000000.jpeg'
                        - 'https://s3.ap-northeast-2.amazonaws.com/project-review-bucket/1620000000001.pdf'
        '400':
          description: 유효하지 않은 사용자입니다. (탈퇴한 사용자 등)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: INVALID_USER
        '500':
          description: Internal Server Error (Schema에서 종류 확인!)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    oneOf:
                      - type: string
                        example: Internal Server Error
                      - type: string
                        example: file too large
                      - type: string
                        example: 'UPLOAD_FILE_FAIL: 에러메세지'
    delete:
      tags:
        - upload
      summary: file delete
      description: |
        업로드한 파일을 삭제합니다.
      produces:
        - application/json
      security:
        - BearerAuth: []
      requestBody:
        required: true
        description: |
          파일 삭제시, 필요한 body 정보입니다.    
          한번에 하나 또는 여러 개의 파일을 삭제할 수 있습니다.
        content:
          application/json:
            schema:
              type: object
              properties:
                file_links:
                  type: array
                  items:
                    type: string
                    example:
                      - 'https://s3.ap-northeast-2.amazonaws.com/project-review-bucket/1620000000000.jpeg'
                      - 'https://s3.ap-northeast-2.amazonaws.com/project-review-bucket/1620000000001.pdf'
      responses:
        '204':
          description: Files deleted successfully (No Content)
        '400':
          description: 유효하지 않은 사용자입니다. (탈퇴한 사용자 등)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: INVALID_USER
        '403':
          description: 지우려는 파일의 사용자와 다른 사용자입니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: DELETE_UPLOADED_FILE_IS_NOT_YOURS
        '404':
          description: 지우려는 파일이 존재하지 않습니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    oneOf:
                      - type: string
                        description: 파일이 S3에 존재하지 않습니다.
                        example: 'DELETE_UPLOADED_FILE_IS_NOT_EXISTS: ${err}'
                      - type: string
                        description: 파일이 존재하지 않습니다.
                        example: NOT_FOUND_UPLOAD_FILE
        '500':
          description: Internal Server Error (Schema에서 종류 확인!)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    oneOf:
                      - type: string
                        example: Internal Server Error
                      - type: string
                        description: 파일이 S3에 존재하지 않습니다.
                        example: 'DELETE_UPLOADED_FILE_IS_NOT_EXISTS: ${err}'
                      - type: string
                        description: S3에 파일 삭제 명령에 실패했습니다.
                        example: 'AWS_SEND_COMMAND_FILE_FAIL: ${err}'
  /search:
    get:
      tags:
        - search
      summary: 검색
      description: |
        제목 또는 내용에 키워드가 포함된 게시글을 검색합니다.  
        검색 결과는 최신순으로 정렬됩니다.
        **제목 또는 내용에 포함된 키워드를 기준으로 앞, 뒤로 제목은 10글자, 내용은 20글자만 추출하여 반환**합니다.  
        **무한스크롤**을 지원합니다.  
        - `index`는 리스트 중 가장 첫번째 게시글의 인덱스를 의미합니다.
        - `limit`는 한번의 요청시 반환하는 게시글의 수를 의미합니다.
        - `index`와 `limit`를 이용하여 클라이언트가 다음 페이지의 게시글을 조절하여 요청할 수 있습니다.
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: 검색할 키워드
          required: true
          schema:
            type: string
        - in: query
          name: index
          description: 검색할 페이지 번호
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: 한 페이지에 보여줄 게시글 수
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 게시글 ID
                    postedAt:
                      type: string
                      description: 게시글 등록 시간
                    title:
                      type: string
                      description: '게시글 제목, 검색 결과에 포함된 키워드를 기준으로 앞, 뒤로 10글자만 추출하여 반환, 검색 결과에 포함된 키워드가 없을 경우 전체 제목의 내용을 앞에서부터 ''검색어의 길이+20글자'' 반환'
                    content:
                      type: string
                      description: '게시글 내용, 검색 결과에 포함된 키워드를 기준으로 앞, 뒤로 20글자만 추출하여 반환, 검색 결과에 포함된 키워드가 없을 경우 전체 본문의 내용을 앞에서부터 ''검색어의 길이+40글자'' 반환'
                example:
                  - id: 1
                    postedAt: 2021-08-01T00:00:00.000Z
                    title: ... 검색어와 관련된 내용입니다.
                    content: null
                  - id: 2
                    postedAt: 2021-08-01T00:00:00.000Z
                    title: 검색어가 없을 때의 내용입...
                    content: ... 검색어와 관련된 내용입니다. 이러저러한 내용들이 ...
  /search/list:
    get:
      tags:
        - search
      summary: 검색어 전체 목록
      description: |
        제목 또는 내용에 키워드가 포함된 게시글의 목록을 반환합니다.  
        검색 결과는 최신순으로 정렬됩니다.
        **제목에 포함된 키워드를 기준으로 앞, 뒤로 10글자만 추출하여 반환**합니다.  
        **내용에 포함된 키워드를 기준으로 앞, 뒤로 30글자만 추출하여 반환**합니다.  
        포함된 키워드가 없다면 전체를 반환합니다.  
        **무한스크롤**을 지원합니다.  
        - `index`는 리스트 중 가장 첫번째 게시글의 인덱스를 의미합니다.
        - `limit`는 한번의 요청시 반환하는 게시글의 수를 의미합니다.
        - `index`와 `limit`를 이용하여 클라이언트가 다음 페이지의 게시글을 조절하여 요청할 수 있습니다.
      produces:
        - application/json
      parameters:
        - in: query
          name: query
          description: 검색할 키워드
          required: true
          schema:
            type: string
        - in: query
          name: index
          description: 검색시 시작되는 게시글의 인덱스 (미입력시 default = 1)
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          description: 한 번의 요청에 보여줄 게시글 수 (미입력시 default = 10)
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: 검색 결과
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: 게시글 id
                    categoryId:
                      type: string
                      description: 카테고리 id
                    category:
                      type: string
                      description: 카테고리 이름
                    userId:
                      type: integer
                      description: 유저 id
                    userNickname:
                      type: string
                      description: 유저 닉네임
                    title:
                      type: string
                      description: '게시글 제목 (**제목에 포함된 키워드를 기준으로 앞, 뒤로 10글자만 추출하여 반환**합니다.)'
                    content:
                      type: string
                      description: '게시글 내용 (**내용에 포함된 키워드를 기준으로 앞, 뒤로 30글자만 추출하여 반환**합니다.)'
                    imgUrl:
                      type: string
                      description: 게시글 대표 이미지의 url
                    viewCnt:
                      type: integer
                      description: 조회수
                    commentCnt:
                      type: integer
                      description: 댓글수
                    likeCnt:
                      type: integer
                      description: 좋아요수
                    filesCnt:
                      type: integer
                      description: 첨부파일수 (이미지 파일은 제외됩니다.)
                    imgCnt:
                      type: integer
                      description: 이미지 파일수
                    createdAt:
                      type: string
                      description: 게시글 생성일
                    updatedAt:
                      type: string
                      description: 게시글 수정일
                    postedAt:
                      type: string
                      description: 게시글 게시일
                    deletedAt:
                      type: string
                      description: 게시글 삭제일
                    statusId:
                      type: integer
                      description: 게시글 상태 id
                example:
                  - id: 1
                    categoryId: 1
                    category: 자유
                    userId: 1
                    userNickname: inchan
                    title: 첫번째 게시글
                    content: '첫번째 게시글 내용 {검색어} ...'
                    imgUrl: 'https://i.imgur.com/1j2j3j4.jpg'
                    viewCnt: 0
                    commentCnt: 0
                    likeCnt: 0
                    filesCnt: 0
                    imgCnt: 1
                    createdAt: '2021-07-01 00:00:00'
                    updatedAt: '2021-07-01 00:00:00'
                    postedAt: '2021-07-01 00:00:00'
                    deletedAt: null
                    statusId: 1
                  - id: 2
                    categoryId: 2
                    category: 질문
                    userId: 1
                    userNickname: inchan
                    title: '두번째 게시글{검색어} ...'
                    content: '...{검색어} 두번째 게시글 내용'
                    imgUrl: 'https://i.imgur.com/1j2j3j4.jpg'
                    viewCnt: 200
                    commentCnt: 0
                    likeCnt: 3
                    filesCnt: 1
                    imgCnt: 2
                    createdAt: '2021-07-01 00:00:00'
                    updatedAt: '2021-07-01 00:00:00'
                    postedAt: '2021-07-01 00:00:00'
                    deletedAt: null
                    statusId: 1
